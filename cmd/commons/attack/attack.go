package attack

import (
	"github.com/SummerSec/SpringExploit/cmd/commons/poc"
	_021 "github.com/SummerSec/SpringExploit/cmd/commons/poc/2021"
	_022 "github.com/SummerSec/SpringExploit/cmd/commons/poc/2022"
	log "github.com/sirupsen/logrus"
	"strings"
)

func Sevice(url string, hashmap map[string]interface{}) {
	log.Debugln("github.com/SummerSec/SpringExploit/cmd/commons/attack/attack.go")
	log.Debugf("[*] Start attack %s", url)
	pocs := make(map[string]interface{})
	a := addPoc(pocs)
	//for k, v := range hashmap {
	//	log.Debugln("key: ", k, " value: ", v)
	//}
	//for _, v := range a { // 循环调用poc
	//	t := v.(poc.PoC)
	//	t.SendPoc(url, hashmap)
	//}
	attack(url, a, hashmap)

}

func init() {
	log.Debug("[*] Init attack")
}

func addPoc(pocs map[string]interface{}) map[string]interface{} {
	log.Debug("[*] Add PoC")
	// TODO 添加poc
	//pocs["demo"] = &poc.Demo{}
	pocs["CVE202222947"] = &_022.CVE202222947{}
	pocs["CVE202222963"] = &_022.CVE202222963{}
	pocs["CVE202126084"] = &_021.CVE202126084{}
	//pocs["CVE202222965"] = &_022.CVE202222965{}
	return pocs

}

func attack(url string, pocs map[string]interface{}, hashmap map[string]interface{}) {
	p := hashmap["Pocs"].(string)
	// 以,分割,获取poc name 将其转换为数组
	pocsName := strings.Split(p, ",")
	var ps []string
	for _, v := range pocsName {
		log.Debugf("[*] 分割字符串 %s", v)
		ps = append(ps, v)
	}
	// 如果没有选定字符串 则默认所有pocs
	if len(ps) == 0 {
		log.Debugln("[*] attack all pocs")
		for _, v := range pocs {
			t := v.(poc.PoC)
			t.SendPoc(url, hashmap)
		}
	} else {
		for p := range ps {
			pocs[ps[p]].(poc.PoC).SendPoc(url, hashmap)
		}
	}

}
