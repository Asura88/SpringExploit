package req

import (
	"github.com/fatih/structs"
)

type ReqInfo struct {
	Method   string
	Url      string
	Body     string
	Header   map[string]string
	Proxy    string
	Timeout  string
	Retry    string
	Mode     string
	H1       bool
	Redirect bool
}

//func (r *ReqInfo) Method() string {
//	return r.Method
//}
//
//func (r *ReqInfo) SetMethod(method string) {
//	r.Method = method
//}
//
//func (r *ReqInfo) Url() string {
//	return r.Url
//}
//
//func (r *ReqInfo) SetUrl(url string) {
//	r.Url = url
//}
//
//func (r *ReqInfo) Body() string {
//	return r.Body
//}
//
//func (r *ReqInfo) SetBody(body string) {
//	r.Body = body
//}
//
//func (r *ReqInfo) Header() map[string]string {
//	return r.Header
//}
//
//func (r *ReqInfo) SetHeader(header map[string]string) {
//	r.Header = header
//}
//
//func (r *ReqInfo) Proxy() string {
//	return r.Proxy
//}
//
//func (r *ReqInfo) SetProxy(proxy string) {
//	r.Proxy = proxy
//}
//
//func (r *ReqInfo) Timeout() string {
//	return r.Timeout
//}
//
//func (r *ReqInfo) SetTimeout(timeout string) {
//	r.Timeout = timeout
//}
//
//func (r *ReqInfo) Repeat() string {
//	return r.Repeat
//}
//
//func (r *ReqInfo) SetRepeat(repeat string) {
//	r.Repeat = repeat
//}
//
//func (r *ReqInfo) Mode() string {
//	return r.Mode
//}
//
//func (r *ReqInfo) SetMode(mode string) {
//	r.Mode = mode
//}

//func NewReqInfo(hashmap map[string]interface{}) *ReqInfo {
//	reqInfo := &ReqInfo{
//		method:  hashmap["method"].(string),
//		url:     hashmap["url"].(string),
//		body:    hashmap["body"].(string),
//		header:  hashmap["header"].(map[string]string),
//		proxy:   hashmap["proxy"].(string),
//		timeout: hashmap["timeout"].(string),
//		repeat:  hashmap["repeat"].(string),
//		mode:    hashmap["mode"].(string),
//	}
//
//	return reqInfo
//}

func NewReqInfo() ReqInfo {
	reqInfo := ReqInfo{
		Method:   "",
		Url:      "",
		Body:     "",
		Header:   make(map[string]string),
		Proxy:    "",
		Timeout:  "10",
		Retry:    "3",
		Mode:     "0",
		H1:       false,
		Redirect: false,
	}
	return reqInfo
}

func NewReqInfoToMap(hashmap map[string]interface{}) map[string]interface{} {
	reqInfo := ReqInfo{
		Method:   "",
		Url:      "",
		Body:     "",
		Header:   make(map[string]string),
		Proxy:    "",
		Timeout:  "10",
		Retry:    "3",
		Mode:     "0",
		H1:       false,
		Redirect: false,
	}
	reqmap := structs.Map(reqInfo)
	reqmap["timeout"] = hashmap["Timeout"].(int)
	reqmap["retry"] = hashmap["Retry"].(int)
	reqmap["mode"] = hashmap["Mode"].(int)
	reqmap["h1"] = hashmap["H1"].(bool)
	reqmap["proxy"] = hashmap["Proxy"].(string)
	reqmap["redirect"] = hashmap["Redirect"].(bool)
	reqmap["body"] = ""

	return reqmap
}

//// UrlEncode 将传入的url进行url编码
//func UrlEncode(target string) string {
//
//	// 对传入的字符串进行UrlEncode
//
//	target = escape(target)
//
//	return target
//
//}
//
//const upperhex = "0123456789ABCDEF"
//
//func escape(s string, ) string {
//	spaceCount, hexCount := 0, 0
//	for i := 0; i < len(s); i++ {
//		c := s[i]
//
//		if c == ' ' {
//			spaceCount++
//		} else {
//			hexCount++
//		}
//
//	}
//
//	if spaceCount == 0 && hexCount == 0 {
//		return s
//	}
//
//	var buf [64]byte
//	var t []byte
//
//	required := len(s) + 2*hexCount
//	if required <= len(buf) {
//		t = buf[:required]
//	} else {
//		t = make([]byte, required)
//	}
//
//	if hexCount == 0 {
//		copy(t, s)
//		for i := 0; i < len(s); i++ {
//			if s[i] == ' ' {
//				t[i] = '+'
//			}
//		}
//		return string(t)
//	}
//
//	j := 0
//	for i := 0; i < len(s); i++ {
//		switch c := s[i]; {
//		case c == ' ':
//			t[j] = '+'
//			j++
//		case true:
//			t[j] = '%'
//			t[j+1] = upperhex[c>>4]
//			t[j+2] = upperhex[c&15]
//			j += 3
//		default:
//			t[j] = s[i]
//			j++
//		}
//	}
//	return string(t)
//}
