package utils

import (
	"github.com/imroc/req/v3"
	log "github.com/sirupsen/logrus"
	"time"
)

func InIt(mode int, timeout int, proxy string, retry int) (client *req.Client) {
	log.Debugf("init httpclient")
	client = req.NewClient()
	if mode != 0 {
		client.EnableDumpAll().EnableDebugLog()
	}
	client.SetLogger(log.StandardLogger())
	// 设置超时时间
	client.SetTimeout(time.Duration(timeout) * time.Second)
	client.SetCommonRetryCount(retry)
	client.DisableInsecureSkipVerify()
	// 设置代理
	f := IsProxyUrl(proxy)
	if f {
		proxy = GetProxyUrl(proxy)
		client.SetProxyURL(proxy)
	} else if proxy == "" {

	} else {
		log.Error("proxy:	" + proxy + "	is not a valid url")
		return nil
	}
	return client
}

func Send(hashmap map[string]interface{}) (resp *req.Response) {
	log.Debugln("send requesting")
	method := hashmap["method"].(string)
	url := hashmap["url"].(string)
	proxy := hashmap["proxy"].(string)
	retry := hashmap["retry"].(int)
	timeout := hashmap["timeout"].(int)
	mode := hashmap["mode"].(int)
	headers := hashmap["headers"].(map[string]string)
	body := hashmap["body"]

	client := InIt(mode, timeout, proxy, retry)

	reqt := client.R().EnableDump()
	reqs := SetRequest(reqt, headers, body.(string))
	resp, err := reqs.Send(method, url)
	if err != nil {
		log.Error("send request error:	" + err.Error())
		return nil
	}
	log.Debugln("send request success")
	res := resp.Dump()
	log.Debugln("response:	" + res)

	return resp
}
