package utils

import (
	"encoding/json"
	"github.com/imroc/req/v3"
	log "github.com/sirupsen/logrus"
	"strconv"
	"time"
)

func InIt(mode int, timeout int, proxy string, repeat int) (client *req.Client) {
	log.Info("init httpclient")
	client = req.NewClient()
	client.SetLogger(log.StandardLogger())
	if mode != 0 {
		client.DevMode()
	}
	// 设置超时时间
	client.SetTimeout(time.Duration(timeout) * time.Second)
	client.SetCommonRetryCount(repeat)
	// 设置代理
	f := IsProxyUrl(proxy)
	if f {
		proxy = GetProxyUrl(proxy)
		client.SetProxyURL(proxy)
	} else {
		log.Error("proxy:	" + proxy + "	is not a valid url")
		return nil
	}
	return client
}

func Send(hashmap map[string]string) (resp *req.Response) {
	method := hashmap["method"]
	url := hashmap["url"]
	proxy := hashmap["proxy"]
	repeat, _ := strconv.Atoi(hashmap["repeat"])
	timeout, _ := strconv.Atoi(hashmap["timeout"])
	mode, _ := strconv.Atoi(hashmap["mode"])
	header := hashmap["header"]
	body := hashmap["body"]
	// string to map
	var tempmap map[string]string
	err := json.Unmarshal([]byte(header), &tempmap)
	if err != nil {
		log.Error("header:	" + header + "	is not a valid json")
		return nil
	}

	client := InIt(mode, timeout, proxy, repeat).EnableDumpAll()

	req := client.R()
	reqs := SetRequest(req, tempmap, body)
	resp, err = reqs.Send(method, url)
	if err != nil {
		log.Error("send request error:	" + err.Error())
		return nil
	}

	return resp
}
