package poc

import (
	req2 "github.com/SummerSec/SpringExploit/cmd/commons/req"
	"github.com/SummerSec/SpringExploit/cmd/commons/utils"
	"github.com/c-bata/go-prompt"
	"github.com/imroc/req/v3"
	log "github.com/sirupsen/logrus"
)

type Demo struct{}

func (d Demo) SendPoc(target string, hashmap map[string]interface{}) {

	log.Debugf("[+] Running default poc")
	//reqinfo := req2.NewReqInfo()
	//reqmap := structs.Map(reqinfo)
	reqmap := req2.NewReqInfoToMap(hashmap)
	// TODO 每次传入的url 都是标准的 http(s)://host:port/path
	// 可以使用 url.Parse 来解析获取 host 和 port
	// for example:
	//result, err := url.Parse(target)
	//if err != nil {
	//	log.Debugln("[-] url parse error")
	//	log.Errorf("[-] url parse error: %s", err)
	//	return
	//}
	//target = result.Scheme + "://" + result.Host + result.Port() + "/" + result.Path

	reqmap["url"] = target

	// 请求方法
	reqmap["method"] = "GET"
	// 默认随机UA 不需要设置
	reqmap["headers"] = map[string]string{
		"User-Agent": utils.GetUA(),
	}
	// 请求body
	reqmap["body"] = ""

	// TODO 可以设置超时时间 重复次数 代理等 下面默认使用默认值
	//reqmap["timeout"] = hashmap["Timeout"].(int)
	//reqmap["retry"] = hashmap["Retry"].(int)
	//reqmap["proxy"] = hashmap["Proxy"].(string)
	//reqmap["mode"] = hashmap["Mode"].(int)
	//reqmap["h1"] = hashmap["H1"].(bool)
	// 发送请求， 获取响应 resp := utils.Send(reqmap)

	resp := utils.Send(reqmap)
	log.Debugln("[+] resp: ", resp.Dump())

	// TODO check exp
	d.CheckExp(resp, target, hashmap)

	// TODO 保存结果
	d.SaveResult(target, hashmap["Out"].(string))

}

func (d Demo) init() {
	log.Debugln("[+] Registering Demo poc")

}

// SaveResult 保存结果
func (d Demo) SaveResult(target, file string) {
	log.Debugf("[+] save result")
	// TODO 保存结果
	utils.SaveToFile(target, file)

}

func (d Demo) CheckExp(resp *req.Response, target string, hashmap map[string]interface{}) bool {
	log.Debugf("[+] check exp")
	return false
}

func completer(d prompt.Document) []prompt.Suggest {
	s := []prompt.Suggest{
		{Text: "id", Description: "you can type command {id}"},
	}
	return prompt.FilterHasPrefix(s, d.GetWordBeforeCursor(), true)
}
