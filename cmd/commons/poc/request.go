package poc

type ReqInfo struct {
	Method  string
	Url     string
	Body    string
	Header  map[string]string
	Proxy   string
	Timeout string
	Retry   string
	Mode    string
}

//func (r *ReqInfo) Method() string {
//	return r.Method
//}
//
//func (r *ReqInfo) SetMethod(method string) {
//	r.Method = method
//}
//
//func (r *ReqInfo) Url() string {
//	return r.Url
//}
//
//func (r *ReqInfo) SetUrl(url string) {
//	r.Url = url
//}
//
//func (r *ReqInfo) Body() string {
//	return r.Body
//}
//
//func (r *ReqInfo) SetBody(body string) {
//	r.Body = body
//}
//
//func (r *ReqInfo) Header() map[string]string {
//	return r.Header
//}
//
//func (r *ReqInfo) SetHeader(header map[string]string) {
//	r.Header = header
//}
//
//func (r *ReqInfo) Proxy() string {
//	return r.Proxy
//}
//
//func (r *ReqInfo) SetProxy(proxy string) {
//	r.Proxy = proxy
//}
//
//func (r *ReqInfo) Timeout() string {
//	return r.Timeout
//}
//
//func (r *ReqInfo) SetTimeout(timeout string) {
//	r.Timeout = timeout
//}
//
//func (r *ReqInfo) Repeat() string {
//	return r.Repeat
//}
//
//func (r *ReqInfo) SetRepeat(repeat string) {
//	r.Repeat = repeat
//}
//
//func (r *ReqInfo) Mode() string {
//	return r.Mode
//}
//
//func (r *ReqInfo) SetMode(mode string) {
//	r.Mode = mode
//}

//func NewReqInfo(hashmap map[string]interface{}) *ReqInfo {
//	reqInfo := &ReqInfo{
//		method:  hashmap["method"].(string),
//		url:     hashmap["url"].(string),
//		body:    hashmap["body"].(string),
//		header:  hashmap["header"].(map[string]string),
//		proxy:   hashmap["proxy"].(string),
//		timeout: hashmap["timeout"].(string),
//		repeat:  hashmap["repeat"].(string),
//		mode:    hashmap["mode"].(string),
//	}
//
//	return reqInfo
//}

func NewReqInfo() ReqInfo {
	reqInfo := ReqInfo{
		Method:  "",
		Url:     "",
		Body:    "",
		Header:  make(map[string]string),
		Proxy:   "",
		Timeout: "",
		Retry:   "",
		Mode:    "",
	}
	return reqInfo
}
