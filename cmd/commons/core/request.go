package core

type ReqInfo struct {
	method  string
	url     string
	body    string
	header  map[string]string
	proxy   string
	timeout string
	repeat  string
	mode    string
}

func (r *ReqInfo) Method() string {
	return r.method
}

func (r *ReqInfo) SetMethod(method string) {
	r.method = method
}

func (r *ReqInfo) Url() string {
	return r.url
}

func (r *ReqInfo) SetUrl(url string) {
	r.url = url
}

func (r *ReqInfo) Body() string {
	return r.body
}

func (r *ReqInfo) SetBody(body string) {
	r.body = body
}

func (r *ReqInfo) Header() map[string]string {
	return r.header
}

func (r *ReqInfo) SetHeader(header map[string]string) {
	r.header = header
}

func (r *ReqInfo) Proxy() string {
	return r.proxy
}

func (r *ReqInfo) SetProxy(proxy string) {
	r.proxy = proxy
}

func (r *ReqInfo) Timeout() string {
	return r.timeout
}

func (r *ReqInfo) SetTimeout(timeout string) {
	r.timeout = timeout
}

func (r *ReqInfo) Repeat() string {
	return r.repeat
}

func (r *ReqInfo) SetRepeat(repeat string) {
	r.repeat = repeat
}

func (r *ReqInfo) Mode() string {
	return r.mode
}

func (r *ReqInfo) SetMode(mode string) {
	r.mode = mode
}

//func NewReqInfo(hashmap map[string]interface{}) *ReqInfo {
//	reqInfo := &ReqInfo{
//		method:  hashmap["method"].(string),
//		url:     hashmap["url"].(string),
//		body:    hashmap["body"].(string),
//		header:  hashmap["header"].(map[string]string),
//		proxy:   hashmap["proxy"].(string),
//		timeout: hashmap["timeout"].(string),
//		repeat:  hashmap["repeat"].(string),
//		mode:    hashmap["mode"].(string),
//	}
//
//	return reqInfo
//}

func NewReqInfo() *ReqInfo {
	reqInfo := &ReqInfo{
		method:  "",
		url:     "",
		body:    "",
		header:  make(map[string]string),
		proxy:   "",
		timeout: "",
		repeat:  "",
		mode:    "",
	}
	return reqInfo
}
