package core

import (
	log "github.com/sirupsen/logrus"
	"github.com/tj/go-update"
	"github.com/tj/go-update/progress"
	githubUpdateStore "github.com/tj/go-update/stores/github"
	"runtime"
)

const (
	Owner = "SummerSec"
	Repo  = "SpringExploit"
)

func selfUpdate() {
	var command string
	switch runtime.GOOS {
	case "windows":
		command = "nuclei.exe"
	default:
		command = "nuclei"
	}
	m := &update.Manager{
		Command: command,
		Store: &githubUpdateStore.Store{
			Owner:   Owner,
			Repo:    Repo,
			Version: version,
		},
	}

	releases, err := m.LatestReleases()
	if err != nil {
		log.Error("Failed to get releases", err)
		return
	}
	if len(releases) == 0 {
		log.Info("No updates available")
		return
	}
	latest := releases[0]
	var currentOS string
	switch runtime.GOOS {
	case "darwin":
		currentOS = "macOS"
	default:
		currentOS = runtime.GOOS
	}
	final := latest.FindZip(currentOS, runtime.GOARCH)
	if final == nil {
		log.Error("No update available for", currentOS, "and", runtime.GOARCH)
	}
	tarball, err := final.DownloadProxy(progress.Reader)
	if err != nil {
		log.Error("could not install latest release ", err)
		return
	}
	if err := m.Install(tarball); err != nil {
		log.Error("could not install latest release", err)
		return
	}

	log.Infof("Successfully Updated to %s Version %s", Repo, latest.Version)

}
