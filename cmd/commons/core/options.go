package core

import (
	"flag"
	"github.com/SummerSec/SpringExploit/cmd/logs"
	log "github.com/sirupsen/logrus"
)

type Options struct {
	// 日志级别
	Mode int
	// file to read
	File string
	// 传入的url
	Url string

	// 代理设置
	Proxy string

	// 版本号
	Version bool
	// 是否输出详细信息
	Verbose bool
	// 线程数量
	Thread int
	// 日志输出文件
	LogFile string
	// 重复请求次数
	Repeat int
	// ip 段
	IP string
}

func (o Options) toString() interface{} {

	return o
}

func ParseOptions() *Options {
	options := &Options{}
	flag.IntVar(&options.Mode, "mode", 6, "debug mode off (default Infolevel = 0  PanicLevel = 1 FatalLevel = 2 \n"+"\t\t ErrorLevel = 3  WarnLevel = 4  InfoLevel = 5  DebugLevel = 6  TraceLevel = 7)")
	flag.IntVar(&options.Thread, "thread", 1, "thread number (default thread = 1)")
	flag.StringVar(&options.File, "file", "", "file to read example: -file=test.txt")
	flag.StringVar(&options.Url, "url", "", "url to read example: -url=http://www.baidu.com")
	flag.StringVar(&options.Proxy, "proxy", "", "proxy example: -proxy=http://127.0.0.1:8080 or -proxy=socks5://127.0.0.1:1080")
	flag.BoolVar(&options.Version, "version", false, "show version")
	flag.BoolVar(&options.Verbose, "verbose", false, "show verbose")
	flag.StringVar(&options.LogFile, "log", "logs.txt", "log file example: -log=/logs/logs.txt")
	flag.IntVar(&options.Repeat, "repeat", 3, "repeat request times")
	flag.StringVar(&options.IP, "ip", "", "ip segment example: -ip=192.168.0.1/24 ")
	flag.Parse()

	v := "0.0.1"

	if options.Version {
		ShowBanner(v)
	} else if url := options.Url; url != "" {
		options.Thread = 1
		options.File = ""

	} else if options.File != "" {
		options.Url = ""

	} else {
		flag.PrintDefaults()
	}
	showVerbose(options)
	logs.SaveLogs(options.LogFile)

	return options

}

func showVerbose(options *Options) {
	if !options.Verbose {
		switch options.Mode {
		case 1:
			log.SetLevel(log.PanicLevel)
		case 2:
			log.SetLevel(log.FatalLevel)
		case 3:
			log.SetLevel(log.ErrorLevel)
		case 4:
			log.SetLevel(log.WarnLevel)
		case 5:
			log.SetLevel(log.InfoLevel)
		case 6:
			log.SetLevel(log.DebugLevel)
		case 7:
			log.SetLevel(log.TraceLevel)
		default:
			log.SetLevel(log.InfoLevel)
			//log.SetLevel(log.DebugLevel)
		}
	} else {
		log.SetLevel(log.DebugLevel)
	}

}
