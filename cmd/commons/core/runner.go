package core

import (
	"encoding/json"
	"github.com/SummerSec/SpringExploit/cmd/commons/attack"
	"github.com/SummerSec/SpringExploit/cmd/commons/utils"
	"github.com/fatih/structs"
	log "github.com/sirupsen/logrus"
)

type Runner struct {
	options *Options
}

func NewRunner(options *Options) (*Runner, error) {
	r := Runner{options: options}

	mops := structs.Map(&r.options)
	data, _ := json.Marshal(mops)
	log.Info("Runner created")
	log.Debug(mops)
	log.Debug("Runner options: ", string(data))
	return &r, nil

}

func (r *Runner) Run() {
	log.Debugln("github.com/SummerSec/SpringExploit/cmd/commons/core/runner.go: Run()")
	log.Info("Runner Running")
	f := r.options.File
	var urls []string
	// TODO: check if options are valid
	//r.options.Url = "http://127.0.0.1:8090/"

	if f == "" {
		urls = append(urls, r.options.Url)
	} else {
		urls, _ = utils.ReadFile(r.options.File)
	}
	log.Debugln("URLs: ", urls)
	var i = 0
	k := r.options.Thread
	hashmap := structs.Map(&r.options)
	for i < len(urls) {
		for t := 0; t < k; t++ {
			if i == len(urls) {
				break
			}
			if urls[i] != "" {
				log.Debugln("Running attack on: ", urls[i])
				// 通道通信 发送url 并且 i++
				c := make(chan int)
				go Start(urls[i], hashmap, i, c) // Start 3 goroutines
				i = <-c
			} else {
				break
			}
		}
	}

}

func Start(url string, hashmap map[string]interface{}, i int, c chan int) {
	log.Debugln("github/SummerSec/SpringExploit/cmd/commons/core/runner.go: Start")

	log.Info("Runner started")
	log.Infoln("testing URL: ", url)
	//for k, v := range hashmap {
	//	log.Debugln("key: ", k, " value: ", v)
	//}
	attack.Sevice(url, hashmap)

	// 放到最后，不然无法生效
	c <- i + 1

}
